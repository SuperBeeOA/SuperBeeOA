package cn.bdqn.j25.action;


import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

import org.apache.log4j.Logger;

import cn.bdqn.j25.pojo.Customer;
import cn.bdqn.j25.pojo.Department;
import cn.bdqn.j25.pojo.Employee;
import cn.bdqn.j25.pojo.Material;
import cn.bdqn.j25.pojo.Procurement;
import cn.bdqn.j25.pojo.State;
import cn.bdqn.j25.pojo.Types;
import cn.bdqn.j25.service.CustomerService;
import cn.bdqn.j25.service.MaterialService;
import cn.bdqn.j25.service.ProcurementService;


import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class procurementAction extends ActionSupport{

	private ProcurementService procurementService;
	private Procurement procurement;
	private Customer customer;
	private CustomerService customerService;
	private List<Customer> listCustomer;
	private List<Material> listMaterial;
	private MaterialService materialService;
	private Material material;
	private InputStream inputStream;
	private Employee employee;
	private Department department;
	private Types type;
	private State state;
	@SuppressWarnings("unchecked")
	private Map<String, Object> request = (Map) ActionContext.getContext().get(
			"request");
	
	private String materialid;
	
	
	//自动生成客户编号
	public String findCustomer() throws UnsupportedEncodingException{
		listCustomer=customerService.findAll();
//		System.out.println(listCustomer);
//		for (Customer c : listCustomer) {
//			c.getCustomerid();
//			c.getCustomername();
//		}
		return SUCCESS;		
	}
	//自动生成产品编号
	public String findProduct() throws UnsupportedEncodingException{
		listProduct=productService.findAll();		 
		return SUCCESS;		
	}
	
	//查询单价和单位
	
	public String findprice(){
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.setIgnoreDefaultExcludes(false); //设置默认忽略 
		jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);//设置循环策略为忽略    解决json最头疼的问题 死循环
		jsonConfig.setExcludes(new String[] {"types","orderses","procurements"});//此处是亮点，只要将所需忽略字段加到数组中即可
		material=materialService.findByid(Integer.parseInt(materialid));
		String jsonStr = JSONObject.fromObject(material, jsonConfig).toString();
		try {
			inputStream = new ByteArrayInputStream(jsonStr.getBytes("utf-8")) ;
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	
		return SUCCESS;
	}
	
	public String addOrder(){
		procurement.setProvider(provider);
		procurement.setMaterial(material);
		procurement.setEmployeeByOperator(employee);	
		procurement.setEmployeeByOriginator(employee);
		procurement.setDepartment(department);
		procurement.setTypes(type);
		procurement.setState(state);

		String result=null;		
		if(procurementService.addOrders(procurement)!=false){
			result="添加成功";
			try {				
				inputStream = new ByteArrayInputStream(result.getBytes("utf-8")) ;
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return SUCCESS;
	}
	
}
